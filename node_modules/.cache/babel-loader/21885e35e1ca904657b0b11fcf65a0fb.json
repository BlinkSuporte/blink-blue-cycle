{"ast":null,"code":"import { http, isExpired, HTTP_TOKEN, REJECT_MSG } from './http';\nimport { arrayStringToArrayInt } from '../utils'; //\n\nexport const fetchProductsByManufacturerId = (idFornecedor, page, recordPerPage) => {\n  const options = {\n    \"Token\": HTTP_TOKEN,\n    \"Esquema\": \"web\",\n    \"Tabela\": \"Produto\",\n    \"Parametros\": [{\n      \"Nome\": \"idFornecedor\",\n      \"Valor\": parseInt(idFornecedor)\n    }, {\n      \"Nome\": \"PaginaSQL\",\n      \"Valor\": parseInt(page)\n    }, {\n      \"Nome\": \"ResultadosPorPaginaSQL\",\n      \"Valor\": parseInt(recordPerPage)\n    }]\n  };\n  return new Promise((resolve, reject) => {\n    const ret = http.post(`Dados/ObterDados`, options);\n\n    if (isExpired(ret)) {\n      reject(REJECT_MSG);\n    }\n\n    resolve(ret);\n  });\n}; //\n\nexport const fetchProductsSearch = (term, idFornecedor, hierarquia, page, recordPerPage) => {\n  const options = {\n    \"Token\": HTTP_TOKEN,\n    \"Esquema\": \"web\",\n    \"Tabela\": \"Produto\",\n    \"Parametros\": [{\n      \"Nome\": \"PaginaSQL\",\n      \"Valor\": parseInt(page)\n    }, {\n      \"Nome\": \"ResultadosPorPaginaSQL\",\n      \"Valor\": parseInt(recordPerPage)\n    }]\n  };\n\n  if (term) {\n    options.Parametros.push({\n      \"Nome\": \"Busca\",\n      \"Valor\": term\n    });\n  }\n\n  if (idFornecedor) {\n    options.Parametros.push({\n      \"Nome\": \"idFornecedor\",\n      \"Valor\": arrayStringToArrayInt(idFornecedor)\n    });\n  }\n\n  if (hierarquia) {\n    options.Parametros.push({\n      \"Nome\": \"HierarquiaProduto\",\n      \"Valor\": hierarquia\n    });\n  }\n\n  return new Promise((resolve, reject) => {\n    const ret = http.post(`Dados/ObterDados`, options);\n\n    if (isExpired(ret)) {\n      reject(REJECT_MSG);\n    }\n\n    resolve(ret);\n  });\n}; //\n\nexport const fetchProductsByCategoryId = (hierarchy, page, recordPerPage) => {\n  const options = {\n    \"Token\": HTTP_TOKEN,\n    \"Esquema\": \"web\",\n    \"Tabela\": \"Produto\",\n    \"Parametros\": [{\n      \"Nome\": \"HierarquiaProduto\",\n      \"Valor\": hierarchy\n    }, {\n      \"Nome\": \"PaginaSQL\",\n      \"Valor\": parseInt(page)\n    }, {\n      \"Nome\": \"ResultadosPorPaginaSQL\",\n      \"Valor\": parseInt(recordPerPage)\n    }]\n  };\n  return new Promise((resolve, reject) => {\n    const ret = http.post(`Dados/ObterDados`, options);\n\n    if (isExpired(ret)) {\n      reject(REJECT_MSG);\n    }\n\n    resolve(ret);\n  });\n}; //\n\nexport const fetchProductsByTagHome = (value, total, tokenLogin = null) => {\n  var options;\n\n  if (value == 'Promocao') {\n    options = {\n      \"Token\": tokenLogin !== null && tokenLogin !== void 0 ? tokenLogin : HTTP_TOKEN,\n      \"Esquema\": \"web\",\n      \"Tabela\": \"Produto\",\n      \"Parametros\": [{\n        \"Nome\": \"Tag\",\n        \"Valor\": value\n      }, {\n        \"Nome\": \"LimiteSQL\",\n        \"Valor\": parseInt(total)\n      }, {\n        \"Nome\": \"MaisRentavelPrimeiro\",\n        \"Valor\": true\n      }, {\n        \"Nome\": \"AgruparPorClassificacao\",\n        \"Valor\": true\n      }, {\n        \"Nome\": \"ProdutosMaisVendidos\",\n        \"Valor\": true\n      }]\n    };\n  } else {\n    options = {\n      \"Token\": tokenLogin !== null && tokenLogin !== void 0 ? tokenLogin : HTTP_TOKEN,\n      \"Esquema\": \"web\",\n      \"Tabela\": \"Produto\",\n      \"Parametros\": [{\n        \"Nome\": \"Tag\",\n        \"Valor\": value\n      }, {\n        \"Nome\": \"LimiteSQL\",\n        \"Valor\": parseInt(total)\n      }, {\n        \"Nome\": \"MaisRentavelPrimeiro\",\n        \"Valor\": true\n      }, {\n        \"Nome\": \"AgruparPorClassificacao\",\n        \"Valor\": true\n      }]\n    };\n  }\n\n  return new Promise((resolve, reject) => {\n    const ret = http.post(`Dados/ObterDados`, options);\n\n    if (isExpired(ret)) {\n      reject(REJECT_MSG);\n    }\n\n    resolve(ret);\n  });\n}; //\n\nexport const fetchProductsByTag = (nameHighlight, page, recordPerPage) => {\n  const options = {\n    \"Token\": HTTP_TOKEN,\n    \"Esquema\": \"web\",\n    \"Tabela\": \"Produto\",\n    \"Parametros\": [{\n      \"Nome\": \"Tag\",\n      \"Valor\": nameHighlight\n    }, {\n      \"Nome\": \"PaginaSQL\",\n      \"Valor\": parseInt(page)\n    }, {\n      \"Nome\": \"ResultadosPorPaginaSQL\",\n      \"Valor\": parseInt(recordPerPage)\n    }]\n  };\n  return new Promise((resolve, reject) => {\n    const ret = http.post(`Dados/ObterDados`, options);\n\n    if (isExpired(ret)) {\n      reject(REJECT_MSG);\n    }\n\n    resolve(ret);\n  });\n}; //\n\nexport const fetchProductsById = idProduto => {\n  const options = {\n    \"Token\": HTTP_TOKEN,\n    \"Esquema\": \"web\",\n    \"Tabela\": \"Produto\",\n    \"Parametros\": [{\n      \"Nome\": \"idProduto\",\n      \"Valor\": parseInt(idProduto)\n    }]\n  };\n  return new Promise((resolve, reject) => {\n    const ret = http.post(`Dados/ObterDados`, options);\n\n    if (isExpired(ret)) {\n      reject(REJECT_MSG);\n    }\n\n    resolve(ret);\n  });\n}; //\n\nexport const fetchProductsBySuggestion = total => {\n  const options = {\n    \"Token\": HTTP_TOKEN,\n    \"Esquema\": \"web\",\n    \"Tabela\": \"Produto\",\n    \"Parametros\": [{\n      \"Nome\": \"ProdutosMaisVendidos\",\n      \"Valor\": true\n    }, {\n      \"Nome\": \"LimiteSQL\",\n      \"Valor\": parseInt(total)\n    }, {\n      \"Nome\": \"ApenasRegistrosPedido\",\n      \"Valor\": true\n    }, {\n      \"Nome\": \"MaisRentavelPrimeiro\",\n      \"Valor\": true\n    }, {\n      \"Nome\": \"AgruparPorClassificacao\",\n      \"Valor\": true\n    }]\n  };\n  return new Promise((resolve, reject) => {\n    const ret = http.post(`Dados/ObterDados`, options);\n\n    if (isExpired(ret)) {\n      reject(REJECT_MSG);\n    }\n\n    resolve(ret);\n  });\n};","map":{"version":3,"sources":["C:/Users/victor.abrao/Desktop/source/clientes-blue-cycle-ecommerce/src/services/products-api.js"],"names":["http","isExpired","HTTP_TOKEN","REJECT_MSG","arrayStringToArrayInt","fetchProductsByManufacturerId","idFornecedor","page","recordPerPage","options","parseInt","Promise","resolve","reject","ret","post","fetchProductsSearch","term","hierarquia","Parametros","push","fetchProductsByCategoryId","hierarchy","fetchProductsByTagHome","value","total","tokenLogin","fetchProductsByTag","nameHighlight","fetchProductsById","idProduto","fetchProductsBySuggestion"],"mappings":"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","sourcesContent":["import { http, isExpired, HTTP_TOKEN, REJECT_MSG } from './http';\r\nimport { arrayStringToArrayInt } from '../utils';\r\n\r\n//\r\nexport const fetchProductsByManufacturerId = (idFornecedor, page, recordPerPage) => {\r\n    const options = {\r\n        \"Token\": HTTP_TOKEN,\r\n        \"Esquema\": \"web\",\r\n        \"Tabela\": \"Produto\",\r\n        \"Parametros\": [\r\n            {\r\n                \"Nome\": \"idFornecedor\",\r\n                \"Valor\": parseInt(idFornecedor)\r\n            },\r\n            {\r\n                \"Nome\": \"PaginaSQL\",\r\n                \"Valor\": parseInt(page)\r\n            },\r\n            {\r\n                \"Nome\": \"ResultadosPorPaginaSQL\",\r\n                \"Valor\": parseInt(recordPerPage)\r\n            }\r\n        ]\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const ret = http.post(`Dados/ObterDados`, options)\r\n\r\n        if (isExpired(ret)) {\r\n            reject(REJECT_MSG);\r\n        }\r\n\r\n        resolve(ret);\r\n    })\r\n}\r\n\r\n\r\n//\r\nexport const fetchProductsSearch = (term, idFornecedor, hierarquia, page, recordPerPage) => {\r\n    const options = {\r\n        \"Token\": HTTP_TOKEN,\r\n        \"Esquema\": \"web\",\r\n        \"Tabela\": \"Produto\",\r\n        \"Parametros\": [\r\n            {\r\n                \"Nome\": \"PaginaSQL\",\r\n                \"Valor\": parseInt(page)\r\n            },\r\n            {\r\n                \"Nome\": \"ResultadosPorPaginaSQL\",\r\n                \"Valor\": parseInt(recordPerPage)\r\n            }\r\n        ]\r\n    }\r\n\r\n    if (term) {\r\n        options.Parametros.push({ \"Nome\": \"Busca\", \"Valor\": term })\r\n    }\r\n\r\n    if (idFornecedor) {\r\n        options.Parametros.push({ \"Nome\": \"idFornecedor\", \"Valor\": arrayStringToArrayInt(idFornecedor) })\r\n    }\r\n\r\n    if (hierarquia) {\r\n        options.Parametros.push({ \"Nome\": \"HierarquiaProduto\", \"Valor\": hierarquia })\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const ret = http.post(`Dados/ObterDados`, options)\r\n\r\n        if (isExpired(ret)) {\r\n            reject(REJECT_MSG);\r\n        }\r\n\r\n        resolve(ret);\r\n    })\r\n}\r\n\r\n\r\n//\r\nexport const fetchProductsByCategoryId = (hierarchy, page, recordPerPage) => {\r\n    const options = {\r\n        \"Token\": HTTP_TOKEN,\r\n        \"Esquema\": \"web\",\r\n        \"Tabela\": \"Produto\",\r\n        \"Parametros\": [\r\n            {\r\n                \"Nome\": \"HierarquiaProduto\",\r\n                \"Valor\": hierarchy\r\n            },\r\n            {\r\n                \"Nome\": \"PaginaSQL\",\r\n                \"Valor\": parseInt(page)\r\n            },\r\n            {\r\n                \"Nome\": \"ResultadosPorPaginaSQL\",\r\n                \"Valor\": parseInt(recordPerPage)\r\n            }\r\n        ]\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const ret = http.post(`Dados/ObterDados`, options)\r\n\r\n        if (isExpired(ret)) {\r\n            reject(REJECT_MSG);\r\n        }\r\n\r\n        resolve(ret);\r\n    })\r\n}\r\n\r\n//\r\nexport const fetchProductsByTagHome = (value, total, tokenLogin = null) => {\r\n    \r\n    var options;\r\n    if(value == 'Promocao'){\r\n        options = {\r\n            \"Token\": tokenLogin ?? HTTP_TOKEN,\r\n            \"Esquema\": \"web\",\r\n            \"Tabela\": \"Produto\",\r\n            \"Parametros\": [\r\n                {\r\n                    \"Nome\": \"Tag\",\r\n                    \"Valor\": value\r\n                },\r\n                {\r\n                    \"Nome\": \"LimiteSQL\",\r\n                    \"Valor\": parseInt(total)\r\n                },\r\n                {\r\n                    \"Nome\": \"MaisRentavelPrimeiro\",\r\n                    \"Valor\": true\r\n                },\r\n                {\r\n                    \"Nome\": \"AgruparPorClassificacao\",\r\n                    \"Valor\": true\r\n                },\r\n                {\r\n                    \"Nome\": \"ProdutosMaisVendidos\",\r\n                    \"Valor\": true\r\n                }\r\n            ]\r\n        }\r\n    }else{\r\n        options = {\r\n            \"Token\": tokenLogin ?? HTTP_TOKEN,\r\n            \"Esquema\": \"web\",\r\n            \"Tabela\": \"Produto\",\r\n            \"Parametros\": [\r\n                {\r\n                    \"Nome\": \"Tag\",\r\n                    \"Valor\": value\r\n                },\r\n                {\r\n                    \"Nome\": \"LimiteSQL\",\r\n                    \"Valor\": parseInt(total)\r\n                },\r\n                {\r\n                    \"Nome\": \"MaisRentavelPrimeiro\",\r\n                    \"Valor\": true\r\n                },\r\n                {\r\n                    \"Nome\": \"AgruparPorClassificacao\",\r\n                    \"Valor\": true\r\n                },\r\n            ]\r\n        }\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const ret = http.post(`Dados/ObterDados`, options);\r\n\r\n        if (isExpired(ret)) {\r\n            reject(REJECT_MSG);\r\n        }\r\n\r\n        resolve(ret);\r\n    })\r\n}\r\n\r\n//\r\nexport const fetchProductsByTag = (nameHighlight, page, recordPerPage) => {\r\n    const options = {\r\n        \"Token\": HTTP_TOKEN,\r\n        \"Esquema\": \"web\",\r\n        \"Tabela\": \"Produto\",\r\n        \"Parametros\": [\r\n            {\r\n                \"Nome\": \"Tag\",\r\n                \"Valor\": nameHighlight\r\n            },\r\n            {\r\n                \"Nome\": \"PaginaSQL\",\r\n                \"Valor\": parseInt(page)\r\n            },\r\n            {\r\n                \"Nome\": \"ResultadosPorPaginaSQL\",\r\n                \"Valor\": parseInt(recordPerPage)\r\n            }\r\n        ]\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const ret = http.post(`Dados/ObterDados`, options)\r\n\r\n        if (isExpired(ret)) {\r\n            reject(REJECT_MSG);\r\n        }\r\n\r\n        resolve(ret);\r\n    })\r\n}\r\n\r\n//\r\nexport const fetchProductsById = (idProduto) => {\r\n    const options = {\r\n        \"Token\": HTTP_TOKEN,\r\n        \"Esquema\": \"web\",\r\n        \"Tabela\": \"Produto\",\r\n        \"Parametros\": [\r\n            {\r\n                \"Nome\": \"idProduto\",\r\n                \"Valor\": parseInt(idProduto)\r\n            }\r\n        ]\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const ret = http.post(`Dados/ObterDados`, options)\r\n\r\n        if (isExpired(ret)) {\r\n            reject(REJECT_MSG);\r\n        }\r\n\r\n        resolve(ret);\r\n    })\r\n}\r\n\r\n//\r\nexport const fetchProductsBySuggestion = (total) => {\r\n    const options = {\r\n        \"Token\": HTTP_TOKEN,\r\n        \"Esquema\": \"web\",\r\n        \"Tabela\": \"Produto\",\r\n        \"Parametros\": [\r\n            {\r\n                \"Nome\": \"ProdutosMaisVendidos\",\r\n                \"Valor\": true\r\n            },\r\n            {\r\n                \"Nome\": \"LimiteSQL\",\r\n                \"Valor\": parseInt(total)\r\n            },\r\n            {\r\n                \"Nome\": \"ApenasRegistrosPedido\",\r\n                \"Valor\": true\r\n            },\r\n            {\r\n                \"Nome\": \"MaisRentavelPrimeiro\",\r\n                \"Valor\": true\r\n            },\r\n            {\r\n                \"Nome\": \"AgruparPorClassificacao\",\r\n                \"Valor\": true\r\n            }\r\n        ]\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const ret = http.post(`Dados/ObterDados`, options)\r\n\r\n        if (isExpired(ret)) {\r\n            reject(REJECT_MSG);\r\n        }\r\n\r\n        resolve(ret);\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}